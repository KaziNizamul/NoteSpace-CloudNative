AWSTemplateFormatVersion: "2010-09-09"
Description: ""
Resources:
  LambdaGetAllNote:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "getNotes"
      FunctionName: "getNotes"
      Handler: "index.handler"
      Architectures:
        - "x86_64"
      Code:
        ZipFile: |
          import { DynamoDBClient, ScanCommand } from "@aws-sdk/client-dynamodb";
          import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";

          const dynamodbClient = new DynamoDBClient({});
          const dynamo = DynamoDBDocumentClient.from(dynamodbClient);

          const notesTableName = 'notes';

          export async function handler(event, context) {
            try {
              const params = {
                TableName: notesTableName,
              };
              const { Items } = await dynamo.send(new ScanCommand(params));

              const formattedItems = Items.map(item => {
                const formattedItem = {};
                for (const key in item) {
                  formattedItem[key] = item[key].S;
                }
                return formattedItem;
              });

              return {
                statusCode: 200,
                body: JSON.stringify(formattedItems),
              };
            } catch (err) {
              return {
                statusCode: 500,
                body: JSON.stringify({ message: err.message }),
              };
            }
          };
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: "nodejs20.x"
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512
  LambdaGetNoteById:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "getNoteById"
      FunctionName: "getNoteById"
      Handler: "index.handler"
      Architectures:
        - "x86_64"
      Code:
        ZipFile: |
          import pkg from '@aws-sdk/lib-dynamodb';
          const { DynamoDBDocumentClient, QueryCommand } = pkg;
          import { DynamoDBClient } from '@aws-sdk/client-dynamodb';

          const dynamodbClient = new DynamoDBClient({});
          const dynamo = DynamoDBDocumentClient.from(dynamodbClient);

          const notesTableName = 'notes';

          export async function handler(event, context) {
            try {
              if (event?.pathParameters && event?.pathParameters?.id) {
                const noteId = event.pathParameters.id;
                console.log({ noteId });
                const params = {
                  TableName: notesTableName,
                  KeyConditionExpression: 'id = :id',
                  ExpressionAttributeValues: {
                    ':id': noteId,
                  },
                };
                const { Items } = await dynamo.send(new QueryCommand(params));
                console.log({ Items });
                if (Items.length === 0) {
                  return {
                    statusCode: 404,
                    body: JSON.stringify({ message: 'Note not found' }),
                  };
                }
                return {
                  statusCode: 200,
                  body: JSON.stringify(Items[0]),
                };
              } else {
                return {
                  statusCode: 500,
                  body: JSON.stringify({ message: 'error' }),
                };
              }
            } catch (err) {
              return {
                statusCode: 500,
                body: JSON.stringify({ message: err }),
              };
            }
          }
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: "nodejs20.x"
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512
  LambdaUpdateNote:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "updateNote"
      FunctionName: "updateNote"
      Handler: "index.handler"
      Architectures:
        - "x86_64"
      Code:
        ZipFile: |
          import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
          import { DynamoDBDocumentClient, UpdateCommand } from "@aws-sdk/lib-dynamodb";
          const dynamoClient = new DynamoDBClient();
          const documentClient = DynamoDBDocumentClient.from(dynamoClient);

          const headers = {
            "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT"
          }
          export const handler = async (event, context) => {
            try {
              if (event?.pathParameters && event?.pathParameters?.id) {
                const noteId = event.pathParameters.id;
                
                const updatedNote = JSON.parse(event.body);
            
                let updateExpression = 'SET ';
                const expressionAttributeNames = {};
                const expressionAttributeValues = {};
                
                if (updatedNote.content) {
                  updateExpression += '#content = :content';
                  expressionAttributeNames['#content'] = 'content';
                  expressionAttributeValues[':content'] = updatedNote.content;
                }
                
                if (updatedNote.title) {
                  if (updateExpression !== 'SET ') updateExpression += ', ';
                  updateExpression += '#title = :title';
                  expressionAttributeNames['#title'] = 'title';
                  expressionAttributeValues[':title'] = updatedNote.title;
                }
                
                const params = {
                  TableName: 'notes',
                  Key: {
                    id: noteId,
                  },
                  UpdateExpression: updateExpression,
                  ExpressionAttributeNames: expressionAttributeNames,
                  ExpressionAttributeValues: expressionAttributeValues,
                  ReturnValues: 'ALL_NEW',
                };
            
                const command = new UpdateCommand(params);
                const { Attributes } = await documentClient.send(command);
              
                const response = {
                  statusCode: 200,
                  headers,
                  body: JSON.stringify(Attributes),
                };
                console.log({ response })
                return response;
              } else {
                return {
                  statusCode: 500,
                  headers,
                  body: JSON.stringify({ message: 'error' }),
                };
              }
            } catch (err) {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ message: err.stack }),
              };
            }
          };
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: "nodejs20.x"
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512
  LambdaDeleteNote:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "deleteNote"
      FunctionName: "deleteNote"
      Handler: "index.handler"
      Architectures:
        - "x86_64"
      Code:
        ZipFile: |
          import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
          import { DynamoDBDocumentClient, DeleteCommand } from "@aws-sdk/lib-dynamodb";
          const dynamoClient = new DynamoDBClient();
          const documentClient = DynamoDBDocumentClient.from(dynamoClient);

          export const handler = async (event, context) => {
            try {
              const noteId = event.pathParameters.id;

              const params = {
                TableName: 'notes',
                Key: {
                  id: noteId,
                },
              };

              await documentClient.send(new DeleteCommand(params));

              return {
                statusCode: 200,
                body: JSON.stringify({ message: 'Note deleted' }),
              };
            } catch (err) {
              return {
                statusCode: 500,
                body: JSON.stringify({ message: err.message }),
              };
            }
          };
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: "nodejs20.x"
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512
  LambdaCreateNote:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "createNote"
      FunctionName: "createNote"
      Handler: "index.handler"
      Architectures:
        - "x86_64"
      Code:
        ZipFile: |
          import { DynamoDBClient, PutItemCommand } from "@aws-sdk/client-dynamodb";

          const dynamodbClient = new DynamoDBClient({});
          const headers = {
            'Access-Control-Allow-Origin' : '*',
            'Access-Control-Allow-Headers':'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
            'Access-Control-Allow-Credentials' : true,
            'Content-Type': 'application/json'
          };

          const notesTableName = 'notes';

          export const handler = async (event, context) => {
            try {
              const { title, content } = JSON.parse(event.body);

              const newNote = {
                id: { S: Date.now().toString() },
                title: { S: title },
                content: { S: content },
                date: { S: new Date().toISOString() },
              };

              const params = {
                TableName: notesTableName,
                Item: newNote,
              };

              await dynamodbClient.send(new PutItemCommand(params));

              return {
                statusCode: 201,
                body: JSON.stringify({
                  id: newNote.id.S,
                  title: newNote.title.S,
                  content: newNote.content.S,
                  date: newNote.date.S,
                }),
                headers,
              };
            } catch (err) {
              console.log('Error:', err);
              return {
                statusCode: 500,
                body: JSON.stringify({ message: 'Internal server error' }),
                headers,
              };
            }
          };
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: "nodejs20.x"
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512
  LambdaOptionsResponse:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "optionResponse"
      FunctionName: "optionResponse"
      Handler: "index.handler"
      Architectures:
        - "x86_64"
      Code:
        ZipFile: |
          export const handler = async (event) => {
            const response = {
              statusCode: 200,
              headers: {
                "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "PUT, GET, HEAD, POST, DELETE, OPTIONS"
              },
              body: JSON.stringify('Hello from Lambda!'),
            };
            console.log({ response });
            return response;
          };
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: "nodejs20.x"
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512

  OptionsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaOptionsResponse.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/OPTIONS/notes"
  OptionsLambdaPermission2:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaOptionsResponse.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/OPTIONS/notes/*"
  CreateNoteLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaCreateNote.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/notes"
  GetAllNoteLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaGetAllNote.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/notes"

  GetNoteByIdLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaGetNoteById.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/notes/*"
  UpdateNoteLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaUpdateNote.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/PUT/notes/*"  
  DeleteNoteLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaDeleteNote.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/DELETE/notes/*"

Outputs:
  LambdaGetAllNoteArn:
    Value: !GetAtt LambdaGetAllNote.Arn
    Description: "ARN of the Lambda function to get all notes"
  
  LambdaGetNoteByIdArn:
    Value: !GetAtt LambdaGetNoteById.Arn
    Description: "ARN of the Lambda function to get a note by ID"
  
  LambdaUpdateNoteArn:
    Value: !GetAtt LambdaUpdateNote.Arn
    Description: "ARN of the Lambda function to update a note"
  
  LambdaDeleteNoteArn:
    Value: !GetAtt LambdaDeleteNote.Arn
    Description: "ARN of the Lambda function to delete a note"
  
  LambdaCreateNoteArn:
    Value: !GetAtt LambdaCreateNote.Arn
    Description: "ARN of the Lambda function to create a note"
  
  LambdaOptionsResponseArn:
    Value: !GetAtt LambdaOptionsResponse.Arn
    Description: "ARN of the Lambda function to handle OPTIONS request"
